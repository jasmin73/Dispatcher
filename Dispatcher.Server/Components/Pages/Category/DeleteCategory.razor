@page "/category/delete/{Id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navManager
@inject IJSRuntime _jsRuntime


<div class="row pt-2">
    <h3 class="card-title text-primary text-center pb-3">Brisanje Kategorije</h3>
    <div class="col-2">
    </div>
    <div class="col-8">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/200w.webp" />
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="DeleteCategory1">
                <DataAnnotationsValidator />
                <div class="form-group pb-2">
                    <label>Naziv</label>
                    <InputText @bind-Value="Category.Name" class="form-control" disabled></InputText>
                    <ValidationMessage For="() => Category.Name"></ValidationMessage>
                </div>
                <div class="form-group pb-2">
                    <label>Opis</label>
                    <InputText Value="HtmlHelper.StripHtml(Category.Description)" class="form-control" disabled></InputText>
                    <ValidationMessage For="() => Category.Description"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary"><i class="bi bi-trash"></i> Obrisi</button>
                    <NavLink href="category" class="btn btn-success"><i class="bi bi-arrow-right-circle"></i> Nazad na listu</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private CategoryDTO Category { get; set; } = new CategoryDTO();
    private bool IsLoading { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
        }
    }
    private async Task LoadCategory()
    {
        IsLoading = true;
        StateHasChanged();
        Category = await _categoryRepository.Get(Id);
        IsLoading = false;
        StateHasChanged();

    }

    private async Task DeleteCategory1()
    {
        await _categoryRepository.Delete(Id);
        await _jsRuntime.ToastrSuccess("Uspesno obrisana kategorija");
        _navManager.NavigateTo("category");
    }
}

